#!/usr/bin/env bash
# script/lint
# Run super-linter locally with the same configuration as the GitHub Actions workflow

set -e

cd "$(dirname "$0")/.."

echo "==> Running Logica code linting..."

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get the default branch (mimics workflow logic: github.base_ref || 'main')
get_default_branch() {
    # The workflow uses github.base_ref || 'main'
    # For local usage, we should default to 'main' to match the workflow behavior
    # This ensures we compare against the same target branch as the CI
    echo "main"
}

# Function to ensure the default branch exists locally
ensure_default_branch_exists() {
    local default_branch="$1"

    if command_exists git && [ -d ".git" ]; then
        # Check if the default branch exists locally
        if ! git show-ref --verify --quiet "refs/heads/$default_branch" && ! git show-ref --verify --quiet "refs/remotes/origin/$default_branch"; then
            echo "==> Default branch '$default_branch' not found locally"
            echo "    Attempting to fetch from origin..."

            # Try to fetch the default branch
            if git fetch origin "$default_branch:$default_branch" 2>/dev/null; then
                echo "    ✅ Fetched '$default_branch' branch from origin"
            else
                echo "    ⚠️  Could not fetch '$default_branch' branch"
                echo "    Super-linter will attempt to use available branches"
            fi
        fi
    fi
}

# Check if Docker is available
if ! command_exists docker; then
    echo "❌ Error: Docker is not installed or not available in PATH."
    echo "   Super-linter requires Docker to run."
    echo "   Please install Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

# Check if Docker daemon is running
if ! docker info >/dev/null 2>&1; then
    echo "❌ Error: Docker daemon is not running."
    echo "   Please start Docker and try again."
    exit 1
fi

# Get default branch for DEFAULT_BRANCH setting (matches workflow: github.base_ref || 'main')
DEFAULT_BRANCH=$(get_default_branch)

# Ensure the default branch exists locally for comparison
ensure_default_branch_exists "$DEFAULT_BRANCH"

# Parse command line arguments
VALIDATE_ALL_CODEBASE=false
LOG_LEVEL="NOTICE"
DRY_RUN=false

while [[ $# -gt 0 ]]; do
    case $1 in
    --all | --validate-all)
        VALIDATE_ALL_CODEBASE=true
        shift
        ;;
    --verbose)
        LOG_LEVEL="DEBUG"
        shift
        ;;
    --info)
        LOG_LEVEL="INFO"
        shift
        ;;
    --dry-run)
        DRY_RUN=true
        shift
        ;;
    --help)
        echo "Usage: $0 [options]"
        echo ""
        echo "Run super-linter locally with the same configuration as GitHub Actions"
        echo ""
        echo "Options:"
        echo "  --all, --validate-all  Validate entire codebase (default: only changed files)"
        echo "  --verbose              Enable verbose debug logging"
        echo "  --info                 Enable info level logging"
        echo "  --dry-run              Show the Docker command that would be run"
        echo "  --help                 Show this help message"
        echo ""
        echo "Examples:"
        echo "  $0                     # Lint only changed files"
        echo "  $0 --all               # Lint entire codebase"
        echo "  $0 --verbose           # Lint with detailed output"
        exit 0
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
    esac
done

# Set up environment variables to match GitHub Actions workflow
SUPER_LINTER_VERSION="v8.0.0"
WORKSPACE_PATH="$(pwd)"

echo "==> Configuration:"
echo "    Super-linter version: $SUPER_LINTER_VERSION"
echo "    Workspace: $WORKSPACE_PATH"
echo "    Default branch: $DEFAULT_BRANCH"
echo "    Validate all codebase: $VALIDATE_ALL_CODEBASE"
echo "    Log level: $LOG_LEVEL"

# Build Docker command
DOCKER_CMD=(
    docker run --rm
    -e "LOG_LEVEL=$LOG_LEVEL"
    -e "RUN_LOCAL=true"
    -e "VALIDATE_ALL_CODEBASE=$VALIDATE_ALL_CODEBASE"
    -e "DEFAULT_BRANCH=$DEFAULT_BRANCH"
    -e "LINTER_RULES_PATH=.github/linters"
    -v "$WORKSPACE_PATH:/tmp/lint"
    "ghcr.io/super-linter/super-linter:$SUPER_LINTER_VERSION"
)

if [ "$DRY_RUN" = true ]; then
    echo ""
    echo "==> Docker command that would be executed:"
    printf '%s ' "${DOCKER_CMD[@]}"
    echo ""
    exit 0
fi

echo ""
echo "==> Pulling super-linter Docker image..."
docker pull "ghcr.io/super-linter/super-linter:$SUPER_LINTER_VERSION"

echo ""
echo "==> Running super-linter..."
echo "    This may take a few minutes on first run..."
echo ""

# Run super-linter
if "${DOCKER_CMD[@]}"; then
    echo ""
    echo "✅ Linting completed successfully!"
    echo "==> All checks passed"
else
    echo ""
    echo "❌ Linting found issues that need to be addressed"
    echo "==> Please review the output above and fix the reported issues"
    exit 1
fi
